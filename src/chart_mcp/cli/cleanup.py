"""Utility helpers to purge temporary artefacts before running tests."""

from __future__ import annotations

import argparse
import shutil
from pathlib import Path
from typing import Iterable, Sequence

# Default directories generated by local development or E2E test runs that should
# be removed before rebuilding the project. Keeping the list centralised ensures
# the CLI and the documentation stay aligned.
DEFAULT_TARGETS: tuple[str, ...] = (
    ".next",
    "node_modules",
    "playwright-report",
    "playwright-results",
)


def clean_worktree(base: Path, targets: Sequence[str] | None = None) -> list[Path]:
    """Delete ``targets`` located under ``base`` and return the removed paths."""

    resolved_base = base.resolve()
    removed: list[Path] = []
    for raw_target in targets or DEFAULT_TARGETS:
        candidate = (resolved_base / raw_target).resolve()
        # Skip entries outside of the base directory to prevent accidental
        # deletions when a caller passes ".." or absolute paths.
        try:
            candidate.relative_to(resolved_base)
        except ValueError:
            continue
        if not candidate.exists():
            continue
        if candidate.is_dir():
            shutil.rmtree(candidate)
        else:
            candidate.unlink()
        removed.append(candidate)
    return removed


def _build_parser() -> argparse.ArgumentParser:
    """Return the argument parser for the cleanup CLI."""

    parser = argparse.ArgumentParser(description="Remove local artefacts before running tests.")
    parser.add_argument(
        "paths",
        nargs="*",
        help="Additional paths to delete relative to the base directory.",
    )
    parser.add_argument(
        "--base",
        type=Path,
        default=Path.cwd(),
        help="Base directory containing the artefacts (defaults to the current working directory).",
    )
    return parser


def main(argv: Sequence[str] | None = None) -> int:
    """Entry point for ``python -m chart_mcp.cli.cleanup``."""

    parser = _build_parser()
    args = parser.parse_args(argv)
    targets: Iterable[str] = args.paths or DEFAULT_TARGETS
    removed = clean_worktree(Path(args.base), list(targets))
    if removed:
        for path in removed:
            print(path)
    else:
        print("No artefacts found; workspace already clean.")
    return 0


if __name__ == "__main__":  # pragma: no cover - exercised via tests
    raise SystemExit(main())


__all__ = ["DEFAULT_TARGETS", "clean_worktree", "main"]
