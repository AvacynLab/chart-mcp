name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Lint with ruff
        run: ruff check .
      - name: Check formatting (black/isort)
        run: make format-check

  hadolint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Dockerfile

  mcp-smoke:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.11-${{ hashFiles('requirements.txt') }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Verify MCP tool registration without spawning a server
        run: |
          python - <<'PY'
          """Ensure ``chart_mcp.mcp_main.register`` wires every expected tool."""

          from chart_mcp import mcp_main


          class DummyServer:
              """Minimal stub exposing the ``tool`` decorator contract."""

              def __init__(self) -> None:
                  self.registered: dict[str, object] = {}

              def tool(self, name: str):
                  def decorator(func):
                      self.registered[name] = func
                      return func

                  return decorator


          server = DummyServer()
          mcp_main.register(server)  # type: ignore[arg-type]
          expected = set(mcp_main.REGISTERED_TOOL_NAMES)
          missing = sorted(expected - set(server.registered))
          if missing:
              raise SystemExit(f"Missing MCP tools: {', '.join(missing)}")
          PY

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.12-${{ hashFiles('requirements.txt') }}
      - run: pip install -r requirements.txt
      - run: mypy src

  db_migrate:
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.11-${{ hashFiles('requirements.txt') }}
      - run: pip install -r requirements.txt
      - name: Run database migrations
        run: python -m chart_mcp.db.migrations

  db_seed:
    runs-on: ubuntu-latest
    needs: db_migrate
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.11-${{ hashFiles('requirements.txt') }}
      - run: pip install -r requirements.txt
      - name: Seed database fixtures
        run: python -m chart_mcp.db.seed

  build:
    runs-on: ubuntu-latest
    needs: db_seed
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: false

  unit_tests:
    runs-on: ubuntu-latest
    needs: build
    env:
      PLAYWRIGHT: "true"
      FEATURE_FINANCE: "true"
      API_TOKEN: testingtoken
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.11-${{ hashFiles('requirements.txt') }}
      - run: pip install -r requirements.txt
      - name: Run unit tests
        run: pytest tests/unit --cov=src --cov-report=xml
      - name: Archive unit coverage report
        run: cp coverage.xml coverage-unit.xml
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-unit
          path: |
            coverage.xml
            coverage-unit.xml

  e2e:
    runs-on: ubuntu-latest
    needs: unit_tests
    env:
      PLAYWRIGHT: "true"
      FEATURE_FINANCE: "true"
      API_TOKEN: testingtoken
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.11-${{ hashFiles('requirements.txt') }}
      - run: pip install -r requirements.txt
      - name: Start API server
        run: |
          uvicorn chart_mcp.app:app --host 127.0.0.1 --port 8000 &
          echo $! > uvicorn.pid
          sleep 2
      - name: Healthcheck API
        run: |
          curl --fail http://127.0.0.1:8000/health
      - name: Run integration tests (E2E)
        run: |
          pytest tests/integration \
            -o addopts="" \
            --junitxml=e2e-junit.xml \
            --cov=src \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=html:htmlcov-integration \
            --maxfail=1 \
            --disable-warnings \
            --durations=5 | tee e2e.log
        shell: bash
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-log
          path: e2e.log
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-junit
          path: e2e-junit.xml
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-integration
          path: |
            coverage-integration.xml
            htmlcov-integration
      - name: Stop API server
        if: always()
        run: |
          if [ -f uvicorn.pid ]; then
            kill $(cat uvicorn.pid) || true
            rm uvicorn.pid
          fi
