# CI pipeline covering linting, type checking, testing, frontend checks,
# Docker image builds, and Playwright end-to-end coverage. Each job mirrors the
# specification outlined in the project backlog so regressions are caught early.
name: CI

on:
  push:
    # Run on every branch so feature work is validated before opening a PR.
    branches:
      - '**'
  pull_request:
    # Keep PR checks available for any base branch (defaults to all).
    branches:
      - '**'
  # Allow maintainers to trigger the workflow manually when needed.
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"

jobs:
  lint:
    name: Lint (ruff / formatting)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Ruff lint
        run: ruff check .
      - name: Check formatting
        run: |
          black --check src tests
          isort --check-only src tests

  typecheck:
    name: Typecheck (mypy)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.12-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run mypy
        run: mypy src

  tests:
    name: Tests (pytest)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: typecheck
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-
            pip-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run pytest
        run: |
          mkdir -p reports
          pytest --junitxml=reports/pytest-junit.xml --cov=src --cov-report=xml
      - name: Upload coverage and junit
        uses: actions/upload-artifact@v4
        with:
          name: pytest-${{ matrix.python-version }}
          path: |
            coverage.xml
            reports/pytest-junit.xml
      - name: Verify MCP registration
        if: matrix.python-version == '3.12'
        run: |
          python - <<'PY'
          """Ensure all documented MCP tools are registered."""
          import importlib

          module = importlib.import_module("chart_mcp.mcp_main")

          class DummyServer:
              def __init__(self) -> None:
                  self.names: list[str] = []

              def tool(self, name: str):
                  def decorator(func):
                      self.names.append(name)
                      return func

                  return decorator

          server = DummyServer()
          module.register(server)
          expected = set(module.REGISTERED_TOOL_NAMES)
          missing = sorted(expected - set(server.names))
          if missing:
              raise SystemExit(f"Missing MCP tools: {', '.join(missing)}")
          PY

  build-backend:
    name: Build backend image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ runner.os }}-
      - name: Log in to registry
        if: ${{ secrets.REGISTRY_URL != '' && secrets.REGISTRY_USERNAME != '' && secrets.REGISTRY_PASSWORD != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: ${{ secrets.REGISTRY_URL != '' && secrets.REGISTRY_USERNAME != '' && secrets.REGISTRY_PASSWORD != '' && secrets.IMAGE_NAME != '' }}
          tags: |
            chart-mcp:${{ github.sha }}
            ${{ secrets.REGISTRY_URL != '' && secrets.IMAGE_NAME != '' && format('{0}/{1}:{2}', secrets.REGISTRY_URL, secrets.IMAGE_NAME, github.sha) || '' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move Docker cache
        run: |
          if [ -d /tmp/.buildx-cache-new ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi
      - name: Run container healthcheck
        env:
          API_TOKEN: testingtoken
        run: |
          docker run -d --rm -p 8000:8000 -e API_TOKEN="$API_TOKEN" --name chart-mcp-ci chart-mcp:${{ github.sha }}
          trap 'docker stop chart-mcp-ci' EXIT
          python docker/healthcheck.py

  build-frontend:
    name: Frontend build & unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8.15.4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Typecheck frontend
        run: pnpm exec tsc --noEmit
      - name: Run Vitest
        run: |
          mkdir -p reports
          pnpm exec vitest run --coverage --reporter=junit --outputFile=reports/vitest-junit.xml
      - name: Upload Vitest artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vitest-results
          path: |
            coverage
            reports/vitest-junit.xml

  playwright-e2e:
    name: Playwright e2e
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: build-frontend
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8.15.4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright tests
        env:
          PLAYWRIGHT_BASE_URL: http://127.0.0.1:3000
        run: pnpm exec playwright test --reporter=line
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
